1.项目的目标，项目主要解决了什么问题
项目的目标是要完成一个电子商城的项目,
2.项目是怎么实现的，采用了什么技术，框架，有哪些困难，又是采用什么办法解决了？
项目采用的是TP3.2框架实现,刚一开始遇到的问题是项目太大从何做起?后来查找相关资料和视频
,一步步做,最后慢慢总结出一些经验
3.自己在团队中是什么角色，做了哪些贡献？
前台的页面已经基本完成,我所做的是后端逻辑处理部分

1.规划项目目录,先做后台模板
后台首页--添加商品(tp自动验证,允许字段,引用传递,只过滤js脚本)
--商品列表--





1.Mysql 中key
总结：
Key是索引约束，对表中字段进行约束索引的，都是通过primary foreign unique等创建的。常见有foreign key，外键关联用的。

KEY forum (status,type,displayorder)  # 是多列索引（键）
KEY tid (tid)                         # 是单列索引（键）。

如建表时： KEY forum (status,type,displayorder)
select * from table group by status,type,displayorder 是否就自动用上了此索引，
而当 select * from table group by status 此索引有用吗？

key的用途：主要是用来加快查询速度的。

IS_POST是TP自带的常量,作用:判断用户是否提交了表单

2.Thinkphp 中$_validate 关键字是在模型中定义的自动验证数据的功能
http://blog.csdn.net/u011341352/article/details/47152207
在model文件夹中设置验证
//验证条件0:有内容就验证 1:有无内容都验证 2:不为空就验证
//验证规则:require 字段必须、
          email 邮箱、
          url URL地址、
          currency 货币、
          number 数字。
$_validate=array(
    array("字段","验证规则","错误信息",[验证条件,附加规则,验证时间]),
);

3.TP create方法使用如下:
$Model = D('User');
$Model->create();
$Model->add();

4.如果表单中出现了不应该出现的字段会怎样？
TP中的create方法默认会接收表单中所有的字段，这样就可能出现接收了一些不应该接收的字段，导致一些错误。
解决办法：在模型中定义create方法只允许接收哪些字段：
protected $insertFields="字段,字段,...";
只允许接收某些字段,防止在f12中修改字段名后,添加仍然有效

5.在添加、修改、删除之前或者之后有时要执行一些代码，这些代码应该写到哪？----->使用钩子函数
&引用传递,函数内部修改函数外部变量必须用&按钮引用传递,除非传递的是一个对象,因为对象默认是
按引用传递的
_before_insert(&$data, $option)
_after_insert($data, $option)
_before_update(&$data, $option)
_after_update($data, $option)
_before_delete($option)
_after_delete($option)

6.美化分页
$this->setConfig('next','下一页');
$this->setConfig('prev','上一页');

7.gii 代码生成器的使用

8.表单可以被模拟,客户端的表单可以模拟id等字段,当表单提交的时候就相当于提交了一个Id
或者模拟下单价格等等,所以需要过滤
而TP create方法默认接收表单所有字段,所以可能会接收不应该接收的字段

图片存放的路径

================================================================================
1.添加时间插件

2.unlink删除文件是路径不能是绝对路径


修改上商品


1.图片的配置和路径优化
硬盘上的路径:D:\...\...\...,上传文件的路径是硬盘上的路径,/../../..这不是硬盘的路径
,所以只能写成相对路径
浏览器显示的路径/../../..,相对网站目录的路径
配置文件中自定义设置配置,


2.自定义函数上传图片和删除图片


$model->field()->alias("a")->join()->where()->order()->limit()->select()

下拉框优化,封装成自定义函数

protected 本子父















